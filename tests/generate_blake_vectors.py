import blake3
import random

def compute_hash(plot_id: bytes, extra: list[int]) -> bytes:
    h = blake3.blake3()

    h.update(plot_id)

    # add the remaining 8 words, as little endian
    for val in extra:
        h.update(val.to_bytes(4, byteorder="little"))
    return h.digest()

def to_c_array(blob: bytes) -> str:
    return f"{{{','.join(f'0x{b:02x}' for b in blob)}}}"


rng = random.Random(1337)

with open("blake_test_cases.hpp", "w+") as f:

    f.write("""
// This file was generated by generate_blake_vectors.py
struct TestCase {
    uint8_t plot_id[32];
    uint32_t data[8];
    uint32_t result[4];
};
TestCase test_cases[100] = {
""")
    for i in range(100):
        plot_id = rng.randbytes(32)
        extra = [int.from_bytes(rng.randbytes(4), byteorder="big") for _ in range(8)]
        result = compute_hash(plot_id, extra)

        # interpret the first 16 bytes as 4 little-endian 32 bit integers
        res = [int.from_bytes(result[i: i+4], byteorder="little") for i in range(0, 16, 4)]
        f.write("{")
        f.write(f"{to_c_array(plot_id)}, ")
        f.write(f"{{{','.join(f'{v}' for v in extra)}}}, ")
        f.write(f"{{{','.join(f'{v}' for v in res)}}} ")
        f.write("},\n")
    f.write("};")
