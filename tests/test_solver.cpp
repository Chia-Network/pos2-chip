#include "test_util.h"
#include "plot/PlotFile.hpp"
#include "pos/ProofFragment.hpp"
#include "solve/Solver.hpp"
#include "pos/ProofValidator.hpp"
#include "common/Utils.hpp"

TEST_SUITE_BEGIN("solve");

TEST_CASE("solve-partial")
{
    // TODO: add solve tests for k28,k30, and k32.
    int k = 18;
    int plot_strength = 2;

    // xs were created by running a k 18 plot with RETAIN_X_VALUES on, and scanning challenges to find an example proof with full x values.
    std::vector<uint32_t> k18_xs_in_proof = {
        65379, 31592, 56632, 42762, 156890, 73048, 71408, 55022, 147446, 218807, 175492, 223046, 246138, 40167, 109777, 184648, 112299, 164826, 56434, 173683, 218269, 137497, 258846, 104360, 223280, 243902, 213944, 177674, 30395, 17175, 215377, 228462, 94027, 82952, 138652, 105050, 139044, 252659, 233097, 53172, 12113, 208318, 228706, 133664, 144266, 233812, 88941, 173094, 231051, 2436, 107113, 74897, 16356, 53098, 199570, 72491, 12324, 203155, 241817, 176548, 75548, 201546, 61605, 138055, 6828, 183527, 37801, 166188, 176402, 212420, 9997, 14519, 29730, 89978, 111632, 232141, 125474, 200268, 239344, 15324, 132358, 5057, 163131, 216355, 166313, 213784, 146477, 136818, 11497, 45139, 262096, 206584, 229739, 98092, 259170, 222836, 230092, 150314, 102297, 102975, 86151, 31236, 102413, 224806, 158195, 82100, 40374, 12682, 260789, 165281, 215958, 118009, 117689, 218596, 55548, 225606, 47905, 58826, 109082, 259655, 201060, 135484, 245820, 222515, 13095, 44794, 7004, 77679, 229592, 150355, 17927, 145826, 239746, 49090, 172694, 65184, 117363, 166751, 126404, 42518, 104409, 259040, 213950, 66986, 61467, 162777, 205327, 233020, 197363, 114525, 180849, 74067, 76189, 116574, 73792, 166302, 13251, 59810, 169989, 209993, 224888, 139119, 231497, 30106, 40092, 104363, 114646, 143699, 85410, 61947, 10775, 140950, 246812, 39300, 224698, 91533, 90559, 97877, 4921, 227478, 115780, 54491, 241736, 10608, 219114, 82289, 141874, 142696, 110245, 82104, 79589, 68782, 109446, 180815, 62405, 34147, 50389, 168976, 37206, 104151, 222697, 50776, 159450, 86232, 72736, 109829, 156348, 168503, 55636, 154846, 259151, 100291, 46989, 182756, 180197, 26241, 112458, 24083, 195241, 71274, 166650, 3778, 167480, 15934, 60558, 242897, 45641, 155990, 209945, 186734, 148476, 102806, 49437, 122463, 47250, 254430, 155338, 137284, 29396, 118342, 157494, 241105, 102388, 179468, 233462, 49615, 5574, 75558, 107095, 87166, 77094, 62182, 95502, 70186, 213452, 140294, 68126, 93694, 216800, 17430, 98187, 174070, 153689, 197083, 41145, 177735, 45571, 69741, 216213, 102883, 194322, 169655, 67643, 87844, 253588, 52875, 36173, 185384, 252191, 130537, 72235, 149742, 43623, 205946, 176170, 185272, 188428, 71360, 247629, 15284, 133506, 247679, 94086, 204428, 215634, 251523, 27131, 86169, 206720, 161425, 183835, 7678, 38038, 124213, 112299, 164826, 56434, 173683, 218269, 137497, 258846, 104360, 223280, 243902, 213944, 177674, 30395, 17175, 215377, 228462, 170231, 145828, 242288, 210233, 76804, 112453, 158648, 89393, 259863, 7031, 44436, 93148, 159893, 232194, 224972, 78181, 8813, 259460, 47370, 226365, 74104, 48238, 249840, 214, 234044, 143123, 167470, 46569, 228647, 12799, 163971, 22566, 70338, 7233, 177911, 72326, 47385, 182751, 42495, 76480, 33372, 156774, 23110, 35661, 233661, 111830, 33844, 2327, 253678, 226612, 196871, 87212, 182502, 36912, 242671, 148311, 186562, 67359, 220928, 79593, 64925, 8793, 76376, 62126, 55078, 83608, 203620, 183297, 59941, 29672, 213525, 120792, 72457, 58422, 63182, 192744, 233374, 13954, 151253, 58561, 111688, 135236, 61496, 77713, 165555, 145402, 176682, 104383, 81432, 31554, 237891, 55988, 37893, 15076, 116748, 73587, 86539, 222231, 99281, 249236, 148651, 202473, 141068, 163143, 104411, 218856, 197311, 182529, 149291, 79198, 210584, 125788, 25851, 27457, 42478, 24319, 209752, 250724, 176675, 139628, 104594, 144927, 180970, 75112, 52171, 104050, 3677, 219896, 123617, 5363, 139679, 192531, 65856, 49337, 116708, 119746, 75189, 23252, 72044, 61106, 254781, 24767, 171577, 28434, 95223, 23305, 108098, 501, 121544, 30073, 177429, 38278, 171462, 138746, 122482, 157656, 257786, 109585, 53129, 34475, 132717, 201745, 67600, 192335, 141256, 121934, 79616, 183257, 136417, 223153, 250948, 201637, 29688, 237264, 147477, 111301, 130829, 260915, 68892, 135831, 16270, 182677, 116727, 231225, 173733, 172460, 153330, 112136, 120727, 42933, 173743, 217742 };
    std::vector<uint32_t> x_bits_list;
    size_t num_x_bit_quadruples = k18_xs_in_proof.size() / 8;
    for (size_t i = 0; i < num_x_bit_quadruples; i++)
    {
        uint32_t x0 = k18_xs_in_proof[i * 8 + 0];
        uint32_t x2 = k18_xs_in_proof[i * 8 + 2];
        uint32_t x4 = k18_xs_in_proof[i * 8 + 4];
        uint32_t x6 = k18_xs_in_proof[i * 8 + 6];
        int bit_drop = k / 2; // for k=18, drop 9 bits to get top half
        uint32_t x0_bits = x0 >> bit_drop;
        uint32_t x2_bits = x2 >> bit_drop;
        uint32_t x4_bits = x4 >> bit_drop;
        uint32_t x6_bits = x6 >> bit_drop;
        x_bits_list.push_back(x0_bits);
        x_bits_list.push_back(x2_bits);
        x_bits_list.push_back(x4_bits);
        x_bits_list.push_back(x6_bits);
    }

    std::string plot_id_hex = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";
    std::array<uint8_t, 32> plot_id = Utils::hexToBytes(plot_id_hex);

    ProofParams params(plot_id.data(), numeric_cast<uint8_t>(k), numeric_cast<uint8_t>(plot_strength));
    ProofCore proof_core(params);
    ProofFragmentCodec fragment_codec(params);

    Solver solver(params);
    solver.setUsePrefetching(true);

    const std::vector<uint32_t> x_solution;
    assert(x_bits_list.size() == 256);
    std::vector<std::array<uint32_t, 512>> all_proofs = solver.solve(std::span<uint32_t, 256>(x_bits_list), k18_xs_in_proof);

    ENSURE(!all_proofs.empty());
    /*if (all_proofs.size() == 0)
    {
        std::cerr << "Error: no proofs found." << std::endl;
    }
    else
    {
        std::cout << "Found " << all_proofs.size() << " proofs." << std::endl;
        for (size_t i = 0; i < all_proofs.size(); i++)
        {
            std::cout << "Proof " << i << ": ";
            for (size_t j = 0; j < all_proofs[i].size(); j++)
            {
                std::cout << all_proofs[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }*/

    // check all proofs matches k18_xs_in_proof
    for (const auto &proof : all_proofs)
    {
        ENSURE(proof.size() == k18_xs_in_proof.size());
        for (size_t i = 0; i < proof.size(); i++)
        {
            ENSURE(proof[i] == k18_xs_in_proof[i]);
        }
    }
}
