#include "test_util.h"
#include "plot/PlotFile.hpp"
#include "pos/ProofFragment.hpp"
#include "solve/Solver.hpp"
#include "pos/ProofValidator.hpp"
#include "common/Utils.hpp"

TEST_SUITE_BEGIN("solve");

TEST_CASE("solve-partial")
{
    // TODO: add solve tests for k28,k30, and k32.
    int k = 18;
    int plot_strength = 2;

    // xs were created by running a k 18 plot with RETAIN_X_VALUES on, and scanning challenges to find an example proof with full x values.
    std::vector<uint32_t> k18_xs_in_proof = {
        798, 230419, 149646, 201243, 53893, 20446, 153858, 42666,
        124164, 125343, 161808, 43119, 221663, 213995, 206, 168386,
        166597, 112333, 38721, 109134, 194576, 44935, 150756, 82028,
        26687, 125173, 87901, 183923, 16245, 117211, 79122, 107917,
        19792, 21218, 114705, 216956, 252782, 111703, 41672, 179257,
        93412, 205171, 135067, 42722, 80611, 177360, 206693, 30895,
        256805, 118843, 55163, 52809, 210468, 246815, 240435, 66346,
        215991, 168360, 182415, 177678, 160551, 46963, 158526, 112901,
        249857, 74077, 18789, 195761, 19426, 134926, 117928, 184279,
        109490, 227999, 84437, 52120, 135723, 210211, 215475, 141992,
        164910, 234454, 129346, 169407, 96015, 220818, 62053, 209081,
        65196, 59735, 92186, 211465, 18887, 25034, 195751, 176748,
        245154, 167865, 219622, 5025, 177566, 195366, 186821, 20281,
        206858, 201263, 2712, 82020, 72237, 201356, 93861, 117862,
        234052, 56150, 169213, 256503, 150982, 112932, 231577, 191303,
        211526, 159773, 5569, 103589, 32365, 103813, 13479, 62356,
        197018, 8877, 253699, 120063, 192736, 152816, 200161, 78638,
        254648, 209052, 13786, 833, 255959, 255122, 41112, 261836,
        115323, 235377, 81397, 4214, 33415, 63649, 8647, 95920,
        229277, 2832, 195806, 67732, 198519, 101433, 109789, 240370,
        150766, 62099, 134405, 183108, 244002, 252408, 175107, 226850,
        210760, 1495, 56811, 141801, 240255, 81271, 157962, 209932,
        253026, 251254, 251254, 243129, 236584, 90633, 110080, 241855,
        96288, 141277, 30514, 218482, 45739, 164075, 29150, 211832,
        162548, 149244, 118755, 16138, 132247, 23121, 121021, 6382,
        191275, 207894, 42241, 261157, 226846, 231408, 85044, 232577,
        246116, 206337, 255303, 41629, 158899, 60112, 31794, 16794,
        23695, 228590, 226653, 76754, 131119, 70437, 234613, 236520,
        97786, 112356, 12452, 61175, 2799, 249248, 220317, 176364,
        137805, 239575, 16292, 120884, 68147, 67037, 259736, 187297,
        222380, 52383, 140579, 76087, 256489, 241211, 142780, 212090,
        197016, 198216, 223675, 210834, 40252, 210864, 218044, 153060,
        204553, 167335, 94109, 48237, 101954, 71884, 190924, 218724,
        223594, 162413, 244208, 98242, 178667, 162646, 213875, 38137,
        215550, 32751, 259262, 231149, 129365, 217640, 122021, 43451,
        7810, 182517, 152775, 196929, 251002, 18591, 234056, 237628,
        115349, 210118, 241403, 114789, 6560, 160612, 55159, 117807,
        179283, 212861, 21360, 8436, 128284, 47727, 103996, 177592,
        118393, 210975, 173211, 62878, 258407, 198679, 104284, 107455,
        250325, 30418, 87533, 120209, 206775, 183964, 45293, 182867,
        143828, 71345, 176464, 130665, 177017, 218468, 61845, 224290,
        208206, 221422, 68112, 223568, 172157, 179782, 145354, 84070,
        93904, 68774, 20583, 38679, 74461, 163104, 46460, 59008,
        35422, 84607, 244199, 189264, 134383, 147716, 204184, 97098,
        258141, 169132, 95248, 26573, 216860, 137538, 243512, 241393,
        1457, 23398, 212559, 140773, 173488, 97912, 64412, 96638,
        226603, 115098, 192568, 31575, 22704, 116282, 166039, 212015,
        49960, 77557, 251142, 14331, 92171, 104765, 253703, 181238,
        9724, 73378, 204148, 103524, 205579, 15559, 255635, 118083,
        58975, 207441, 169964, 147529, 196142, 104420, 97454, 160380,
        92211, 61637, 190218, 215638, 97804, 160759, 95867, 211634,
        13527, 18243, 218157, 115164, 11135, 261035, 88515, 92702,
        96580, 162847, 113092, 188174, 143586, 128204, 83877, 183373,
        55575, 78152, 102955, 49501, 31128, 27311, 216049, 169880,
        16318, 202899, 205487, 9851, 79650, 253349, 109834, 71564,
        19022, 229816, 156994, 9380, 67783, 87510, 73498, 19484,
        143303, 116356, 155334, 233884, 29901, 205882, 77641, 89129,
        241902, 72578, 162832, 172624, 12743, 247780, 147610, 244954,
        211332, 252228, 219995, 3587, 245604, 9910, 104482, 38726,
        184993, 97998, 62404, 46599, 260315, 161117, 176343, 157654,
        30130, 87576, 99301, 153536, 141215, 35575, 36547, 37788,
        187218, 82535, 89592, 177191, 31865, 108149, 172475, 43280,
        52556, 178027, 212525, 210764, 176399, 117922, 118765, 222561,
        84550, 60429, 100604, 7081, 212818, 54616, 232894, 203695};

    std::vector<uint32_t> x_bits_list;
    int num_x_bit_quadruples = k18_xs_in_proof.size() / 8;
    for (int i = 0; i < num_x_bit_quadruples; i++)
    {
        uint32_t x0 = k18_xs_in_proof[i * 8 + 0];
        uint32_t x2 = k18_xs_in_proof[i * 8 + 2];
        uint32_t x4 = k18_xs_in_proof[i * 8 + 4];
        uint32_t x6 = k18_xs_in_proof[i * 8 + 6];
        int bit_drop = k / 2; // for k=18, drop 9 bits to get top half
        uint32_t x0_bits = x0 >> bit_drop;
        uint32_t x2_bits = x2 >> bit_drop;
        uint32_t x4_bits = x4 >> bit_drop;
        uint32_t x6_bits = x6 >> bit_drop;
        x_bits_list.push_back(x0_bits);
        x_bits_list.push_back(x2_bits);
        x_bits_list.push_back(x4_bits);
        x_bits_list.push_back(x6_bits);
    }

    std::string plot_id_hex = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef";
    std::array<uint8_t, 32> plot_id = Utils::hexToBytes(plot_id_hex);

    ProofParams params(plot_id.data(), k, plot_strength);
    ProofCore proof_core(params);
    ProofFragmentCodec fragment_codec(params);

    Solver solver(params);
    solver.setUsePrefetching(true);

    const std::vector<uint32_t> x_solution;
    std::vector<std::vector<uint32_t>> all_proofs = solver.solve(x_bits_list);

    ENSURE(!all_proofs.empty());
    /*if (all_proofs.size() == 0)
    {
        std::cerr << "Error: no proofs found." << std::endl;
    }
    else
    {
        std::cout << "Found " << all_proofs.size() << " proofs." << std::endl;
        for (size_t i = 0; i < all_proofs.size(); i++)
        {
            std::cout << "Proof " << i << ": ";
            for (size_t j = 0; j < all_proofs[i].size(); j++)
            {
                std::cout << all_proofs[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }*/

    // check all proofs matches k18_xs_in_proof
    for (const auto &proof : all_proofs)
    {
        ENSURE(proof.size() == k18_xs_in_proof.size());
        for (size_t i = 0; i < proof.size(); i++)
        {
            ENSURE(proof[i] == k18_xs_in_proof[i]);
        }
    }
}